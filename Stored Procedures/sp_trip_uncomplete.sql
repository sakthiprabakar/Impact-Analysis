CREATE PROCEDURE sp_trip_uncomplete(  
	@trip_ID            		int,
	@user						varchar(10),
	@complete_tsdf_code			varchar(15),
	@debug              		int) 
AS 
/************************************************************************************************* 
Loads to :    PLT_AI 
04/08/2009 KAM  	This procedure will uncomplete a trip by voiding all of the receipts that were
						generated, delete the BillingLinkLookup entries if the receipts
						have not been processed.
08/24/2009 KAM		Update the procedure to handle all receipts until the point that the containers
						are complete.
09/04/2009 KAM		Updated to use a line of 0 in the receipt audit table when writing the void audit.
09/16/2009 KAM    Updated to uncomplete by company and profit center
11/06/2009 KAM		Update queries to trip_audit
02/10/2010 KAM		Updated to revert the sttus back to U instead of D
09/06/2012 RWB		For 3rd party uncompletes, trip_status was still being set to D...changed to U
11/08/2012 RWB		Trips are now completed by TSDF instead of facility, and are recorded in TripCompleteTSDF
12/18/2012 RWB		When multiple TSDFs exist, querying container counts was not functioning correctly. If
				only one TSDF had containers entered, an error message would display when
				trying to uncomplete the other TSDF with no containers entered.
10/31/2013 RWB		Automatically void containers if they were automatically generated by Trip Complete.
04/23/2015 RWB	To support Kroger Invoicing (where no BillingLinkLookup records are created from Trip Complete),
				add a union to get full list of receipts that should be voided
SAMPLE CALLS: 
sp_trip_uncomplete 1318, 'SA-FIX', 21,0,1 
*************************************************************************************************/ 

 -- Declare Variables 
DECLARE  @receipt_company_id        INT, 
         @receipt_id                INT, 
         @receipt_profit_ctr_id     INT,
			@void_reason					Varchar(20),
			@workorder_company_id		INT,
			@workorder_profit_ctr_id	INT,
			@workorder_id					INT,
			@receipt_status				char(1),
			@fingerprint_status			char(1),
			@submitted_flag				char(1),
			@error_message					varchar(50),
			@container_cnt					INT,
			@return_code					INT,
--			@min_line						INT,
--			@max_line						INT,
			@complete_count				INT,
			@error_msg					varchar(80)
			
Set @void_reason = 'Trip ' + CONVERT(varchar(20), @trip_ID) + ' was UnCompleted'

--  ************************************************************************************** 
--  Lets start the transaction 
--  ************************************************************************************** 
BEGIN TRANSACTION

--  ************************************************************************************** 
--  Check for Third Party Uncompletes 
--  ************************************************************************************** 
/*** rb 11/08/2012 Complete is now by TSDF instead of facility
If @complete_company_id = 999 and @complete_profit_ctr_id = 999
	Begin
		Update TripHeader set third_party_complete_flag = 'F',trip_status = 'U' where trip_id = @trip_id
		Set @error_message = ''
		Set @return_code = 0
		GOTO EXIT_OR_ERROR
	END
***/

-- Update TripCompleteTSDF to a status of Approved
UPDATE	TripCompleteTSDF
SET	status = 'R',
	modified_by = @user,
	date_modified = getdate()
WHERE	trip_id = @trip_id
AND	tsdf_code = @complete_tsdf_code

if exists (select 1 from TSDF where tsdf_code = @complete_tsdf_code and isnull(eq_flag,'F') = 'F')
begin
	Update TripHeader set third_party_complete_flag = 'F',trip_status = 'U' where trip_id = @trip_id
	Set @error_message = ''
	Set @return_code = 0
	GOTO EXIT_OR_ERROR
end


-- First lets get a list of the receipts that were generated by the trip

DECLARE trip_receipt CURSOR  FOR Select BillingLinkLookup.source_company_id,
      												BillingLinkLookup.source_profit_ctr_id,
														BillingLinkLookup.source_id,
														BillingLinkLookup.company_id,
														BillingLinkLookup.profit_ctr_id,
														BillingLinkLookup.receipt_id
												from  BillingLinkLookup
												Join WorkorderHeader ON
														(BillingLinkLookup.source_company_id = WorkorderHeader.company_id and
														BillingLinkLookup.source_profit_ctr_id = WorkorderHeader.profit_ctr_id and
														BillingLinkLookup.source_id = WorkorderHeader.workorder_id)
												-- rb 12/18/2012 Join to receipt to filter by TSDF being completed														BillingLinkLookup.source_id = WorkorderHeader.workorder_id)
												join Receipt on
													BillingLinkLookup.company_id = Receipt.company_id and
													BillingLinkLookup.profit_ctr_id = Receipt.profit_ctr_id and
													BillingLinkLookup.receipt_id = Receipt.receipt_id
												join TSDF on
													TSDF.eq_company = Receipt.company_id and
													TSDF.eq_profit_ctr = Receipt.profit_ctr_id and
													isnull(TSDF.eq_flag,'F') = 'T' and
													TSDF.tsdf_code = @complete_tsdf_code
												-- rb 12/18/2012 end
												where WorkOrderHeader.trip_id = @trip_id
-- rb 11/08/2012 Trips now completed by TSDF instead of Facility
--														and BillingLinkLookup.company_id = @complete_company_id
--														and billingLinkLookup.profit_ctr_id = @complete_profit_ctr_id

-- rb 04/23/2015 Need to get receipts using Trip Stop Rates (implemented for Kroger Invoicing)
												UNION
												SELECT 	WorkorderHeader.company_ID,
													WorkorderHeader.profit_ctr_ID,
													WorkorderHeader.workorder_ID,
													ReceiptHeader.company_id,
													ReceiptHeader.profit_ctr_id,
													ReceiptHeader.receipt_id
												FROM TripHeader
												JOIN WorkorderHeader
													ON TripHeader.trip_id = WorkorderHeader.trip_id
													AND isnull(WorkorderHeader.trip_stop_rate_flag,'F') = 'T'
												JOIN ReceiptHeader
													ON WorkorderHeader.trip_id = ReceiptHeader.trip_id
													AND WorkorderHeader.trip_sequence_id = ReceiptHeader.trip_sequence_id
													AND EXISTS (SELECT 1 from Receipt
																WHERE company_id = ReceiptHeader.company_id
																AND profit_ctr_id = ReceiptHeader.profit_ctr_id
																AND receipt_id = ReceiptHeader.receipt_id
																AND receipt_status <> 'V')
												JOIN TSDF ON
													TSDF.eq_company = ReceiptHeader.company_id and
													TSDF.eq_profit_ctr = ReceiptHeader.profit_ctr_id and
													isnull(TSDF.eq_flag,'F') = 'T' and
													TSDF.tsdf_code = @complete_tsdf_code
												WHERE TripHeader.trip_id = @trip_id

OPEN trip_receipt 
       
	FETCH  NEXT FROM trip_receipt 
     	INTO  @workorder_company_id, 
				@workorder_profit_ctr_id,
				@workorder_id,
				@receipt_company_id,
				@receipt_profit_ctr_id,
				@receipt_id
           		
       
   WHILE @@FETCH_STATUS = 0 
   	BEGIN 

		If @debug = 1
			Begin
				Print 'Receipt Company: ' + IsNull(Convert(Varchar,@receipt_company_id),'xx')
				Print 'Receipt Profit Ctr: ' + IsNull(Convert(Varchar,@receipt_profit_ctr_id),'xx')
				Print 'Receipt ID: ' + IsNull(Convert(Varchar,@receipt_id),'xx')
				Print 'WorkOrder Company: ' + IsNull(Convert(Varchar,@workOrder_Company_id),'xx')
				Print 'Workorder Profit Ctr: ' + IsNull(Convert(Varchar,@workorder_profit_ctr_id),'xx')
				Print 'Workorder ID: ' + IsNull(Convert(Varchar,@workorder_id),'xx')
			END

			If @receipt_id > 0 
				Begin
					--  ************************************************************************************** 
					--  Get receipt Fields 
					--  ************************************************************************************** 
							
					Select @Receipt_status = receipt_status,
							 @submitted_flag = submitted_flag,
							 @fingerprint_status = fingerpr_status
					From receipt 
						where	company_id = @receipt_company_id
							and profit_ctr_id = @receipt_profit_ctr_id
							and receipt_id = @receipt_id


					If @submitted_flag = 'T'
						Begin
							Set @error_message = 'Receipt is Submitted.'
							Set @return_Code = -1
							GOTO EXIT_OR_ERROR
						END
				
					--  ************************************************************************************** 
					--  Insert Audit
					--  ************************************************************************************** 
					Insert Into ReceiptAudit(
									company_id,
									profit_ctr_id,
									receipt_id,
									line_id,
									table_name,
									after_value,
									audit_reference,
									modified_by,
									modified_from,
									Date_Modified)	
									Values (@receipt_company_id,
									@receipt_profit_ctr_id,
									@receipt_id,
									0,
									'Receipt',
									'Voided by Trip' + Cast(@trip_id as varchar),
									'Uncomplete Procedure',
									@user,
									'S_PROC',
									GetDate())


					--  ************************************************************************************** 
					--  Handle Containers 
					--  ************************************************************************************** 
					-- rb 10/31/2013 Add special check for generated stock containers...they can be voided if generated from Trip Complete
declare @gen_count int
					select @gen_count = COUNT(distinct cd.container_id)
					from Container c
					join ContainerDestination cd
						on c.company_id = cd.company_id
						and c.profit_ctr_id = cd.profit_ctr_id
						and c.receipt_id = cd.receipt_id
						and c.line_id = cd.line_id
						and cd.container_type = 'R'
					where c.receipt_id = @receipt_id
					and c.profit_ctr_id = @receipt_profit_ctr_id
					and c.company_id = @receipt_company_id
					and c.container_type = 'R'
					and isnull(c.trip_id,0) = @trip_ID
if @debug = 1
	print 'Gen count: ' + convert(varchar(10),@gen_count)
	
				
					--  Check for complete containers
					Set @complete_count = (Select Count(container_id)
						FROM ContainerDestination
						WHERE receipt_id = @receipt_id
						AND profit_ctr_id = @receipt_profit_ctr_id
						AND company_id = @receipt_company_id
						AND status = 'C'
						AND container_type = 'R')

					If @debug = 1
						Begin
							Print 'Complete Count: ' + IsNull(Convert(Varchar,@complete_count),'xxx')
						END

					-- rb 10/31/2013 Only raise error if containers were not generated. Otherwise, void out the stock containers
					if isnull(@gen_count,0) > 0
					begin
						if exists (select 1 /*from ContainerDestination cd_r
									join ContainerDestination cd_s
										on cd_r.company_id = cd_s.company_id
										and cd_r.profit_ctr_id = cd_s.profit_ctr_id
										and cd_r.base_container_id = cd_s.container_id
									join Container c_s
										on cd_s.company_id = c_s.company_id
										and cd_s.profit_ctr_id = c_s.profit_ctr_id
										and cd_s.line_id = c_s.line_id
										and cd_s.container_id = c_s.container_id
									where cd_r.receipt_id = @receipt_id
									and cd_r.profit_ctr_id = @receipt_profit_ctr_id
									and cd_r.company_id = @receipt_company_id
									and cd_r.container_type = 'R'
									and (cd_s.status = 'C' or c_s.status = 'C')*/
									from ContainerDestination cd_s
									join ContainerDestination cd_r
										on cd_r.company_id = cd_s.company_id
										and cd_r.profit_ctr_id = cd_s.profit_ctr_id
										and cd_r.base_container_id = cd_s.container_id
										and cd_r.receipt_id = @receipt_id
										and cd_r.profit_ctr_id = @receipt_profit_ctr_id
										and cd_r.company_id = @receipt_company_id
										and cd_r.container_type = 'R'
									join Container c
										on cd_r.receipt_id = c.receipt_id
										and cd_r.line_id = c.line_id
										and cd_r.profit_ctr_id = c.profit_ctr_id
										and cd_r.company_id = c.company_id
										and c.container_type = 'R'
										and c.trip_id = @trip_id
									where cd_s.container_type = 'S'
									and cd_s.status = 'C')
						begin
							Set @error_message = 'Some containers have been completed.'
							Set @return_Code = -2
							GOTO EXIT_OR_ERROR
						end
						
						-- void the Stock Containers...the original code that voids the Receipt Containers follows
						update cd_s
						set status = 'V', modified_by = @user, date_modified = GETDATE()
						from ContainerDestination cd_s
						join ContainerDestination cd_r
							on cd_r.company_id = cd_s.company_id
							and cd_r.profit_ctr_id = cd_s.profit_ctr_id
							and cd_r.base_container_id = cd_s.container_id
							and cd_r.receipt_id = @receipt_id
							and cd_r.profit_ctr_id = @receipt_profit_ctr_id
							and cd_r.company_id = @receipt_company_id
							and cd_r.container_type = 'R'
						join Container c
							on cd_r.receipt_id = c.receipt_id
							and cd_r.line_id = c.line_id
							and cd_r.profit_ctr_id = c.profit_ctr_id
							and cd_r.company_id = c.company_id
							and c.container_type = 'R'
							and c.trip_id = @trip_id
						where cd_s.container_type = 'S'

						update Container
						set status = 'V', modified_by = @user, date_modified = GETDATE()
						from Container c
						join ContainerDestination cd_r
							on cd_r.company_id = c.company_id
							and cd_r.profit_ctr_id = c.profit_ctr_id
							and cd_r.base_container_id = c.container_id
							and cd_r.receipt_id = @receipt_id
							and cd_r.profit_ctr_id = @receipt_profit_ctr_id
							and cd_r.company_id = @receipt_company_id
							and cd_r.container_type = 'R'
						where c.container_type = 'S'
						and c.trip_id = @trip_id
						
						update WorkOrderDetailCC
						set destination_container_id = null, modified_by = @user, date_modified = GETDATE()
						from WorkOrderDetailCC wdc
						join WorkOrderDetail wd
							on wdc.workorder_id = wd.workorder_id
							and wdc.company_id = wd.company_id
							and wdc.profit_ctr_id = wd.profit_ctr_id
							and wdc.sequence_id = wd.sequence_id
							and wd.resource_type = 'D'
							and wd.tsdf_code = @complete_tsdf_code
						where wdc.workorder_id = @workorder_id
						and wdc.company_id = @workorder_company_id
						and wdc.profit_ctr_id = @workorder_profit_ctr_id
						and wdc.destination_container_id is not null
					end
					-- rb 10/31/2013 Original error checking follows
					else
					begin
						If @complete_count > 0
							Begin
								Set @error_message = 'Containers are Complete.'
								Set @return_Code = -2
								GOTO EXIT_OR_ERROR
							END
					end

					--  Update the containers
					UPDATE ContainerDestination SET status = 'V', modified_by = @user, date_modified = GETDATE()
					WHERE receipt_id = @receipt_id 
					AND profit_ctr_id = @receipt_profit_ctr_id
					AND company_id = @receipt_company_id
					AND container_type = 'R' 
			
					UPDATE Container SET status = 'V', modified_by = @user, date_modified = GETDATE()
					WHERE receipt_id = @receipt_id 
					AND profit_ctr_id = @receipt_profit_ctr_id 
					AND company_id = @receipt_company_id
					AND container_type = 'R'

					--  ************************************************************************************** 
					--  Update receipts 
					--  ************************************************************************************** 
					Update receipt
					set receipt_status = 'V',
						 fingerpr_status = 'V',
					    void_reason = @void_reason,
						 voided_by = @user,
						 date_modified = GetDate(),
						 modified_by = @user
					where	company_id = @receipt_company_id
							and profit_ctr_id = @receipt_profit_ctr_id
							and receipt_id = @receipt_id

			END
			--  ************************************************************************************** 
			--  Remove Links 
			--  ************************************************************************************** 
			If @receipt_id > 0
				Begin
					Delete From BillingLinkLookup
					Where trans_source = 'I'
						and company_id = @receipt_company_id
						and profit_ctr_id = @receipt_profit_ctr_id
						and receipt_id = @receipt_id

					If @debug = 1 
						Print 'Delete by receipt'
				END
			ELSE
				BEGIN
					-- Delete the "Exempt" link from work order
					Delete From BillingLinkLookup
					Where trans_source = 'I'
						and company_id is NULL
						and profit_ctr_id is NULL
						and receipt_id is NULL
						and source_type = 'W'
						and source_company_id = @workorder_company_id
						and source_profit_ctr_id = @workorder_profit_ctr_id
						and source_id = @workorder_id	

					If @debug = 1 
						Print 'Delete by WorkOrder'	
				END
		
			FETCH  NEXT FROM trip_receipt 
		  		INTO  @workorder_company_id, 
						@workorder_profit_ctr_id,
						@workorder_id,
						@receipt_company_id,
						@receipt_profit_ctr_id,
						@receipt_id

		END

UPDATE TripHeader set trip_status = 'U' Where trip_id = @trip_id 

If @debug = 1
		Print 'Trip Status: U'


EXIT_OR_ERROR: 
-- rb 11/08/2012 Trips are now completed by TSDF instead of Facility
--If @complete_company_id <> 999 and @complete_profit_ctr_id <> 999
if not exists (select 1 from TSDF where tsdf_code = @complete_tsdf_code and isnull(eq_flag,'F') = 'F')
	Begin
		if @debug = 1
			Print 'Closing Receipt Cursor'
		 CLOSE trip_receipt 
		 DEALLOCATE trip_receipt
	END
 
 If @debug = 1
		 Begin
			Print 'Return Code = ' + convert(varchar,@return_code)
			Print @error_message
		End
		
 IF @return_code = -1 
   BEGIN 
	 Set @error_msg = 'Trip Reversal Process Failed - Receipt has been submitted'
     ROLLBACK TRANSACTION 
     RAISERROR ( @error_msg,16,1) 
     return -1
   END 
 ELSE
	If @return_code = -2
		Begin
			Set @error_msg = 'Trip Reversal Process Failed - Containers have been completed'
			 ROLLBACK TRANSACTION
			 RAISERROR (@error_msg,16,1)
                         return -1
		End
 Else
	BEGIN 

	if @debug = 1
		Print 'Inserting TripAudit record'

      INSERT INTO tripaudit 
                 (trip_id, 
                  table_name, 
                  column_name, 
                  before_value, 
                  after_value, 
                  audit_reference, 
                  modified_from, 
                  modified_by, 
                  date_modified) 
      VALUES     (@trip_id,
						'TripHeader',
						'trip_status',
						'C',
-- rb 11/08/2012 Trips are now completed by TSDF instead of Approval
--						'U for ' + Cast(@complete_company_id as Varchar) + '-' + Cast(@complete_profit_ctr_id as varchar),
						'U for ' + @complete_tsdf_code,
						'Trip Uncomplete Procedure',
						'EQAI',
						@user,
						Getdate()) 

     COMMIT TRANSACTION
   END 
return 0


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[sp_trip_uncomplete] TO [EQAI]
    AS [dbo];

